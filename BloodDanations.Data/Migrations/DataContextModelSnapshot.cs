// <auto-generated />
using BloodDanations.Data.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BloodDanations.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.36")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("blood_donations.Entities.BloodDose", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DonorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTaken")
                        .HasColumnType("bit");

                    b.Property<string>("bloodType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DonorId");

                    b.ToTable("bloodDoses");
                });

            modelBuilder.Entity("blood_donations.Entities.CompatibilityCheck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BloodeDoseId")
                        .HasColumnType("int");

                    b.Property<int>("NumNeedDose")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("bloodDoseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("bloodDoseId");

                    b.ToTable("CompatibilityChecks");
                });

            modelBuilder.Entity("blood_donations.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("EmailEmployee")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstNameEmployee")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastNameEmployee")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tz")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("employeeRank")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("employees");
                });

            modelBuilder.Entity("blood_donations.Entities.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddressPatient")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("FirstNamePatient")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastNamePatient")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tz")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bloodType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("healthFund")
                        .HasColumnType("int");

                    b.Property<int>("levelOfUrgency")
                        .HasColumnType("int");

                    b.Property<int>("sex")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("blood_donations.Subjects.Donor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddressDonor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailDonor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstNameDonor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastNameDonor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Origin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tz")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("healthFund")
                        .HasColumnType("int");

                    b.Property<int?>("sex")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Donor");
                });

            modelBuilder.Entity("blood_donations.Entities.BloodDose", b =>
                {
                    b.HasOne("blood_donations.Subjects.Donor", "donor")
                        .WithMany("BloodDoses")
                        .HasForeignKey("DonorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("donor");
                });

            modelBuilder.Entity("blood_donations.Entities.CompatibilityCheck", b =>
                {
                    b.HasOne("blood_donations.Entities.Patient", "patient")
                        .WithMany("compatibilityChecks")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("blood_donations.Entities.BloodDose", "bloodDose")
                        .WithMany("compatibilityChecks")
                        .HasForeignKey("bloodDoseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("bloodDose");

                    b.Navigation("patient");
                });

            modelBuilder.Entity("blood_donations.Entities.Patient", b =>
                {
                    b.HasOne("blood_donations.Entities.Employee", "employee")
                        .WithMany("patients")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employee");
                });

            modelBuilder.Entity("blood_donations.Entities.BloodDose", b =>
                {
                    b.Navigation("compatibilityChecks");
                });

            modelBuilder.Entity("blood_donations.Entities.Employee", b =>
                {
                    b.Navigation("patients");
                });

            modelBuilder.Entity("blood_donations.Entities.Patient", b =>
                {
                    b.Navigation("compatibilityChecks");
                });

            modelBuilder.Entity("blood_donations.Subjects.Donor", b =>
                {
                    b.Navigation("BloodDoses");
                });
#pragma warning restore 612, 618
        }
    }
}
